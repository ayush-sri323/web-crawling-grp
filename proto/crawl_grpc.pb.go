// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: crawl.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CrawlerServiceClient is the client API for CrawlerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CrawlerServiceClient interface {
	Crawl(ctx context.Context, in *UrlRequest, opts ...grpc.CallOption) (CrawlerService_CrawlClient, error)
}

type crawlerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCrawlerServiceClient(cc grpc.ClientConnInterface) CrawlerServiceClient {
	return &crawlerServiceClient{cc}
}

func (c *crawlerServiceClient) Crawl(ctx context.Context, in *UrlRequest, opts ...grpc.CallOption) (CrawlerService_CrawlClient, error) {
	stream, err := c.cc.NewStream(ctx, &CrawlerService_ServiceDesc.Streams[0], "/crawl_service.CrawlerService/Crawl", opts...)
	if err != nil {
		return nil, err
	}
	x := &crawlerServiceCrawlClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CrawlerService_CrawlClient interface {
	Recv() (*UrlResponse, error)
	grpc.ClientStream
}

type crawlerServiceCrawlClient struct {
	grpc.ClientStream
}

func (x *crawlerServiceCrawlClient) Recv() (*UrlResponse, error) {
	m := new(UrlResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CrawlerServiceServer is the server API for CrawlerService service.
// All implementations must embed UnimplementedCrawlerServiceServer
// for forward compatibility
type CrawlerServiceServer interface {
	Crawl(*UrlRequest, CrawlerService_CrawlServer) error
	mustEmbedUnimplementedCrawlerServiceServer()
}

// UnimplementedCrawlerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCrawlerServiceServer struct {
}

func (UnimplementedCrawlerServiceServer) Crawl(*UrlRequest, CrawlerService_CrawlServer) error {
	return status.Errorf(codes.Unimplemented, "method Crawl not implemented")
}
func (UnimplementedCrawlerServiceServer) mustEmbedUnimplementedCrawlerServiceServer() {}

// UnsafeCrawlerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CrawlerServiceServer will
// result in compilation errors.
type UnsafeCrawlerServiceServer interface {
	mustEmbedUnimplementedCrawlerServiceServer()
}

func RegisterCrawlerServiceServer(s grpc.ServiceRegistrar, srv CrawlerServiceServer) {
	s.RegisterService(&CrawlerService_ServiceDesc, srv)
}

func _CrawlerService_Crawl_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UrlRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CrawlerServiceServer).Crawl(m, &crawlerServiceCrawlServer{stream})
}

type CrawlerService_CrawlServer interface {
	Send(*UrlResponse) error
	grpc.ServerStream
}

type crawlerServiceCrawlServer struct {
	grpc.ServerStream
}

func (x *crawlerServiceCrawlServer) Send(m *UrlResponse) error {
	return x.ServerStream.SendMsg(m)
}

// CrawlerService_ServiceDesc is the grpc.ServiceDesc for CrawlerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CrawlerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "crawl_service.CrawlerService",
	HandlerType: (*CrawlerServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Crawl",
			Handler:       _CrawlerService_Crawl_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "crawl.proto",
}
